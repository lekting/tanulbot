/**
 * Document handler for processing PDF files
 */
import * as fs from 'fs/promises';
import * as path from 'path';
import { Context, InputFile, InlineKeyboard } from 'grammy';
import { TELEGRAM_BOT_TOKEN, TMP_DIR } from '../config';
import { countTokens, estimateCost } from '../utils/text';
import { extractTextFromPdf, downloadFile, createAnkiDeck, formatTime } from '../services/document';
import { extractWordPairs } from '../services/openai/index';
import { store } from '../store';

// Define callback data for buttons
const CALLBACK_ACCEPT = 'process_pdf_accept';
const CALLBACK_CANCEL = 'process_pdf_cancel';

// Telegram file size limits
const MAX_BOT_FILE_SIZE = 20 * 1024 * 1024; // 20MB - Telegram bot API limit

// Store pending document processing tasks
interface PendingTask {
  filePath: string;
  text: string;
  messageId: number;
  pageCount: number;
}

const pendingTasks = new Map<number, PendingTask>();

/**
 * Handle document upload (PDF files)
 * @param ctx - Telegram context
 */
export async function handleDocumentUpload(ctx: Context): Promise<void> {
  try {
    // Get file from message
    const file = ctx.message?.document;
    if (!file) {
      await ctx.reply('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // Check file size
    if (file.file_size && file.file_size > MAX_BOT_FILE_SIZE) {
      // File is too large, provide instructions for handling large files
      const instructionsKeyboard = new InlineKeyboard()
        .url('–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏', 'https://ocrmypdf.readthedocs.io/en/latest/installation.html');
      
      await ctx.reply(
        'üìö –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API (–ª–∏–º–∏—Ç 20MB).\n\n' +
        '–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
        '1. –†–∞–∑–¥–µ–ª–∏—Ç—å PDF –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n' +
        '2. –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, —Å–∂–∞–≤ –µ–≥–æ\n' +
        '3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É OCRmyPDF –∏ —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n\n' +
        'üìè –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ' + formatFileSize(file.file_size),
        { reply_markup: instructionsKeyboard }
      );
      return;
    }

    // Download the file
    const fileId = file.file_id;
    const fileInfo = await ctx.api.getFile(fileId);
    const fileName = file.file_name ?? `temp-${Date.now()}.pdf`;
    const filePath = path.join(TMP_DIR, fileName);
    
    // Get file URL and download
    const fileLink = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    // Send initial message
    const processingMsg = await ctx.reply('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...');
    await downloadFile(fileLink, filePath);
    
    // Update message after download
    await ctx.api.editMessageText(
      ctx.chat?.id || ctx.from?.id || 0,
      processingMsg.message_id,
      'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...'
    );

    // Extract text with OCR if needed, with progress updates
    const { text, pageCount, ocrUsed } = await extractTextFromPdf(filePath, async (info) => {
      try {
        let statusMessage = info.status;
        
        // Add time estimation if available
        if (info.estimatedTimeRemaining) {
          statusMessage += `\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${formatTime(info.estimatedTimeRemaining)}`;
        }
        
        // Add page info if available
        if (info.pageCount) {
          if (info.currentPage !== undefined) {
            statusMessage += `\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${info.currentPage}/${info.pageCount}`;
          } else {
            statusMessage += `\nüìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${info.pageCount}`;
          }
        }
        
        // Add progress indicator
        statusMessage += `\n${progressBar(info.progress)}`;
        
        await ctx.api.editMessageText(
          ctx.chat?.id || ctx.from?.id || 0,
          processingMsg.message_id,
          statusMessage
        );
      } catch (error) {
        console.error('Error updating progress:', error);
      }
    });

    // Check if text was extracted
    if (!text || text.trim().length === 0) {
      await ctx.api.editMessageText(
        ctx.chat?.id || ctx.from?.id || 0,
        processingMsg.message_id,
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ OCR.'
      );
      await fs.unlink(filePath);
      return;
    }

    // Calculate tokens and estimated cost
    const tokens = countTokens(text);
    const cost = estimateCost(tokens);
    
    // Create inline keyboard with accept/cancel buttons
    const keyboard = new InlineKeyboard()
      .text('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', CALLBACK_ACCEPT)
      .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', CALLBACK_CANCEL);
    
    // Final success message with info
    const finalMessage = `üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n` +
      `${ocrUsed ? 'üîé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞' : 'üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é'}\n` +
      `üìö –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageCount}\n` +
      `üî§ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${tokens} —Ç–æ–∫–µ–Ω–æ–≤\n` +
      `üí∞ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: $${cost.toFixed(4)}\n\n` +
      `–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?`;
    
    // Update the message
    await ctx.api.editMessageText(
      ctx.chat?.id || ctx.from?.id || 0,
      processingMsg.message_id,
      finalMessage,
      { reply_markup: keyboard }
    );
    
    // Store the pending task
    if (ctx.from?.id) {
      pendingTasks.set(ctx.from.id, {
        filePath,
        text,
        messageId: processingMsg.message_id,
        pageCount
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
    
    // Check for specific error types
    if (error instanceof Error) {
      if (error.message.includes('file is too big')) {
        await ctx.reply(
          'üìö –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API (–ª–∏–º–∏—Ç 20MB).\n\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –º–µ–Ω—å—à–µ 20MB –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É.'
        );
        return;
      }
    }
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

/**
 * Handle button callbacks for document processing
 * @param ctx - Telegram context
 */
export async function handleDocumentCallback(ctx: Context): Promise<void> {
  try {
    // Check if this is a callback query
    if (!ctx.callbackQuery?.data || !ctx.from?.id) return;
    
    const userId = ctx.from.id;
    const data = ctx.callbackQuery.data;
    
    // Get the pending task for this user
    const task = pendingTasks.get(userId);
    if (!task) {
      await ctx.answerCallbackQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.');
      return;
    }
    
    // Handle the accept action
    if (data === CALLBACK_ACCEPT) {
      await ctx.answerCallbackQuery('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞...');
      
      // Update the message to show processing status
      await ctx.api.editMessageText(
        ctx.chat?.id || userId,
        task.messageId,
        '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏...',
        { reply_markup: undefined }
      );
      
      // Start time tracking
      const startTime = Date.now();
      
      // Extract word pairs
      const wordPairs = await extractWordPairs(task.text);
      
      // Update progress
      await ctx.api.editMessageText(
        ctx.chat?.id || userId,
        task.messageId,
        `‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${wordPairs.length} —Å–ª–æ–≤. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É...`,
        { reply_markup: undefined }
      );
      
      store.setLastWordPairs(wordPairs);

      // Create Anki deck
      const buffer = await createAnkiDeck('Hungarian Vocabulary', wordPairs);
      const deckPath = path.join(TMP_DIR, 'hungarian.apkg');
      await fs.writeFile(deckPath, buffer);
      
      // Calculate total processing time
      const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);

      // Update final message
      await ctx.api.editMessageText(
        ctx.chat?.id || userId,
        task.messageId,
        `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalTime} —Å–µ–∫!\n` +
        `üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${task.pageCount}\n` +
        `üî§ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–ª–æ–≤: ${wordPairs.length}\n` +
        `üì¶ –ö–æ–ª–æ–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.`,
        { reply_markup: undefined }
      );

      // Send deck to user
      await ctx.replyWithDocument(new InputFile(deckPath), { 
        caption: `üéØ –í–∞—à–∞ –∫–æ–ª–æ–¥–∞ Anki –≥–æ—Ç–æ–≤–∞! –°–æ–¥–µ—Ä–∂–∏—Ç ${wordPairs.length} –∫–∞—Ä—Ç–æ—á–µ–∫.` 
      });

      // Clean up files
      await fs.unlink(task.filePath);
      await fs.unlink(deckPath);
      
      // Clean up the task
      pendingTasks.delete(userId);
    }
    // Handle the cancel action
    else if (data === CALLBACK_CANCEL) {
      await ctx.answerCallbackQuery('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      
      // Update the message to show cancellation
      await ctx.api.editMessageText(
        ctx.chat?.id || userId,
        task.messageId,
        '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        { reply_markup: undefined }
      );
      
      // Clean up file
      await fs.unlink(task.filePath);
      
      // Clean up the task
      pendingTasks.delete(userId);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
}

/**
 * Create a text-based progress bar
 * @param percent - Percentage completion (0-100)
 * @returns Progress bar string
 */
function progressBar(percent: number): string {
  const completed = Math.floor(percent / 10);
  const remaining = 10 - completed;
  
  return '‚ñì'.repeat(completed) + '‚ñë'.repeat(remaining) + ` ${Math.round(percent)}%`;
}

/**
 * Format file size in human-readable format
 * @param bytes - File size in bytes
 * @returns Formatted file size string
 */
function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
} 